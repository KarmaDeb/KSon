package es.karmadev.api.kson;

import org.jetbrains.annotations.NotNull;

import java.util.*;

/**
 * Represents a json array. Similar
 * as {@link JsonObject} this object is
 * similar to a map, with the difference
 * the value is represented in multiple values,
 * instead of a single one.
 */
@SuppressWarnings("unused")
public class JsonArray extends JsonInstance implements Iterable<JsonInstance> {

    /**
     * Create a new json array
     *
     * @param path the array path
     * @param key the array key
     * @return the new array
     */
    public static JsonArray newArray(final String path, final String key) {
        return newArray(path, key, '.');
    }

    /**
     * Create a new json array
     *
     * @param pathSeparator the path separator
     * @param key the path key
     * @return the new array
     */
    public static JsonArray newArray(final String key, final char pathSeparator) {
        return newArray("", key, '.');
    }

    /**
     * Create a new json array
     *
     * @param path the array path
     * @param key the array key
     * @param pathSeparator the array path separator
     * @return the new array
     */
    public static JsonArray newArray(final String path, final String key, final char pathSeparator) {
        return new JsonArray(path, key, pathSeparator);
    }

    private final List<JsonInstance> childElements = new ArrayList<>();

    /**
     * Create a new array
     */
    public JsonArray() {
        this("", UUID.randomUUID().toString().replace("_", ""), '.');
    }

    /**
     * Create a new array
     *
     * @param path the array path
     * @param key the array key
     * @param pathSeparator the array path separator
     */
    public JsonArray(final @NotNull String path, final String key, final char pathSeparator) {
        this(path, key, pathSeparator, new ArrayList<>());
    }

    /**
     * Create a new array
     *
     * @param path the array path
     * @param key the array key
     * @param pathSeparator the array path separator
     * @param elements the array elements
     */
    public JsonArray(final String path, final String key, final char pathSeparator, final List<JsonInstance> elements) {
        super(path, key, pathSeparator);
        childElements.addAll(elements);
    }

    /**
     * Get all the array elements
     *
     * @return the array elements
     */
    public Collection<JsonInstance> getElements() {
        return Collections.unmodifiableList(childElements);
    }

    /**
     * Get the array size
     *
     * @return the array size
     */
    @Override
    public int size() {
        return childElements.size();
    }

    /**
     * Clone the element on the new path and
     * the new path separator
     *
     * @param newPath       the path
     * @param newKey        the new key
     * @param pathSeparator the path separator
     * @return the new instance
     */
    @Override
    public JsonInstance clone(final String newPath, final String newKey, final char pathSeparator) {
        return new JsonArray(newPath, newKey, pathSeparator, childElements);
    }

    /**
     * Get if the array contains the string
     * element. Please note the behaviour of
     * this method may be different between array
     * implementations, some implementations may
     * consider to return false if the {@link JsonNative}
     * generated by this method is not the exact same
     * instance as the one stored internally by the array
     *
     * @param string the string to check with
     * @return true if the array contains an element with
     * the same string value.
     */
    public boolean contains(final String string) {
        JsonNative jsonNat = JsonNative.forSequence("", string);
        return contains(jsonNat);
    }

    /**
     * Get if the array contains the number
     * element. Please note the behaviour of
     * this method might be unstable, because of
     * number conversions, it's highly recommended
     * to use generated {@link JsonNative} instances
     * for this instead.
     * Please note the behaviour of
     * this method may be different between array
     * implementations, some implementations may
     * consider to return false if the {@link JsonNative}
     * generated by this method is not the exact same
     * instance as the one stored internally by the array
     *
     * @param number the number to check with
     * @return if the array contains an element with
     * the same number value
     */
    public boolean contains(final Number number) {
        JsonNative jsonNat = JsonNative.forNumber("", number);
        return contains(jsonNat);
    }

    /**
     * Get if the array contains the boolean
     * element.
     * Please note the behaviour of
     * this method may be different between array
     * implementations, some implementations may
     * consider to return false if the {@link JsonNative}
     * generated by this method is not the exact same
     * instance as the one stored internally by the array
     *
     * @param bool the boolean to check with
     * @return if the array contains an element with
     * the same boolean
     */
    public boolean contains(final boolean bool) {
        JsonNative jsonNat = JsonNative.forBoolean("", bool);
        return contains(jsonNat);
    }

    /**
     * Get if the array contains the element.
     * This method is not compatible with calls in
     * where the element is a {@link JsonArray array}. That's
     * because JSON does not allow to store json arrays
     * in arrays, take also in mind that, in case of
     * {@link JsonObject object} checks, this method will
     * check that all the keys matches the array object key
     * values, including child elements, which can lead to high
     * computing usage. We instead recommend to iterate through
     * the elements and use a schema validator on the element
     * to validate that the element is the one you are expecting
     *
     * @param element the element to check with
     * @return if the array contains an element with
     * the same values
     */
    public boolean contains(final JsonInstance element) {
        if (element == null || element.isNull()) return false;
        if (element.isNativeType()) {
            JsonNative jsonNative = element.asNative();
            if (jsonNative.isString()) {
                String stringValue = jsonNative.getString();
                return childElements.stream().anyMatch((child) -> {
                    if (!child.isNativeType()) return false;
                    JsonNative childNative = child.asNative();

                    if (!childNative.isString()) return false;
                    return childNative.getString().equals(stringValue);
                });
            } else if (jsonNative.isNumber()) {
                Number numberValue = jsonNative.getNumber();
                return childElements.stream().anyMatch((child) -> {
                    if (!child.isNativeType()) return false;
                    JsonNative childNative = child.asNative();

                    if (!childNative.isNumber()) return false;
                    return childNative.getNumber().equals(numberValue);
                });
            } else if (jsonNative.isBoolean()) {
                boolean bool = jsonNative.getBoolean();
                return childElements.stream().anyMatch((child) -> {
                    if (!child.isNativeType()) return false;
                    JsonNative childNative = child.asNative();

                    if (!childNative.isBoolean()) return false;
                    return childNative.getBoolean() == bool;
                });
            }
        }

        if (element.isObjectType()) {
            JsonObject object = element.asObject();
            return childElements.stream().anyMatch((instance) -> {
                if (!instance.isObjectType()) return false;

                JsonObject cObj = instance.asObject();
                return compareObjects(object, cObj);
            });
        }

        if (element.isArrayType()) {
            JsonArray other = element.asArray();
            for (JsonInstance otherElement : other) {
                if (!contains(otherElement)) return false;
            }

            return true;
        }

        return false;
    }

    /**
     * Get an instance by its index on the
     * array. The index is nothing but the
     * position on the array of the element.
     *
     * @param index the element index
     * @return the element on the specified index
     * @throws IndexOutOfBoundsException if the index
     *                                   is out of bounds of the array
     */
    public JsonInstance get(final int index) throws IndexOutOfBoundsException {
        return childElements.get(index);
    }

    /**
     * Set the instance at the specified array
     * position
     *
     * @param index       the index to modify
     * @param newInstance the new value
     * @return if the operation was successful
     * @throws IndexOutOfBoundsException if the index
     *                                   is out of bounds of the array
     */
    public boolean set(final int index, final JsonInstance newInstance) throws IndexOutOfBoundsException {
        if (newInstance == null || newInstance.isNull()) return false;
        childElements.set(index, newInstance);

        return true;
    }

    /**
     * Remove an element on the specified
     * array position
     *
     * @param index the array position
     * @return if the operation was successful
     * @throws IndexOutOfBoundsException if the index
     *                                   is out of bounds of the array
     */
    public boolean remove(final int index) throws IndexOutOfBoundsException {
        return childElements.remove(index) != null;
    }

    /**
     * remove an element from the array
     *
     * @param instance the element to remove
     * @return if the operation was successful
     */
    public boolean remove(final JsonInstance instance) {
        return childElements.remove(instance);
    }

    /**
     * Add all the elements from the
     * other array into this element
     *
     * @param other the other array
     * @param unique add only if the current
     *               array does not contain the
     *               element
     * @return if the operation was successful
     */
    public boolean addAll(final JsonArray other, final boolean unique) {
        boolean changes = false;
        for (JsonInstance instance : other) {
            if (unique) {
                if (contains(instance)) continue;
            }

            if (add(instance))
                changes = true;
        }

        return changes;
    }

    /**
     * Add an instance to the array
     *
     * @param instance the instance to add
     * @return if the operation was successful
     */
    public boolean add(final JsonInstance instance) {
        if (instance == null || instance.isNull()) return false;
        return childElements.add(instance);
    }

    /**
     * Add the element to the array
     *
     * @param sequence the sequence to add
     * @return if the operation was successful
     */
    public boolean add(final CharSequence sequence) {
        JsonNative jsonNat = JsonNative.forSequence("", sequence);
        if (jsonNat.isNull()) return false;

        return add(jsonNat);
    }

    /**
     * Add the element to the array
     *
     * @param number the number to add
     * @return if the operation was successful
     */
    public boolean add(final Number number) {
        JsonNative jsonNat = JsonNative.forNumber("", number);
        if (jsonNat.isNull()) return false;

        return add(jsonNat);
    }

    /**
     * Add the element to the array
     *
     * @param bool the boolean to add
     * @return if the operation was successful
     */
    public boolean add(final Boolean bool) {
        JsonNative jsonNat = JsonNative.forBoolean("", bool);
        if (jsonNat.isNull()) return false;

        return add(jsonNat);
    }

    /**
     * Returns an iterator over elements of type {@code T}.
     *
     * @return an Iterator.
     */
    @NotNull
    @Override
    public Iterator<JsonInstance> iterator() {
        return new ArrayList<>(childElements).iterator();
    }

    /**
     * Get if the object is empty. The expected
     * behaviours are the following:
     * <ul>
     *     <li>{@link JsonObject objects} - Return true if the object has no keys defined</li>
     *     <li>{@link JsonArray arrays} - Return true if the array has no elements</li>
     *     <li>{@link JsonNative natives} - Returns true if the native type is string, and is empty, or if the native type is null</li>
     * </ul>
     *
     * @return if the object is empty
     */
    @Override
    public boolean isEmpty() {
        return childElements.isEmpty();
    }

    /**
     * Compare the object1 with the
     * object 2
     *
     * @param object1 the object 1
     * @param object2 the object 2
     * @return if the object matches
     */
    private static boolean compareObjects(final JsonObject object1, final JsonObject object2) {
        Collection<String> o1keys = object1.getKeys(true);
        Collection<String> o2keys = object2.getKeys(true);

        if (!o1keys.equals(o2keys)) return false;
        for (String key : o1keys) {
            JsonInstance instance1 = object1.getChild(key);
            JsonInstance instance2 = object2.getChild(key);

            if (!Objects.equals(instance1, instance2)) return false;
        }

        return true;
    }
}
